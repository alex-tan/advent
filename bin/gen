#!/usr/bin/env ruby
# typed: true

format = ARGV[0]

case format
when /(\d{4})-(\d+)/
  year_dir = "Y#{$1}"

  dir_name = File.join('./app', year_dir)
  Dir.mkdir(dir_name) unless Dir.exist?(dir_name)

  haskell_module_1 = "D#{$2}"
  haskell_module_2 = "D#{$2}a"
  txt_path = File.join(dir_name, "D#{$2}.txt")

  [haskell_module_1, haskell_module_2].each do |module_|
    file = "#{module_}.hs"
    path = File.join(dir_name, file)
    if File.exist?(path)
      puts "#{path} already exists"
      next
    end

    template =
    <<~HASKELL
      {-# LANGUAGE QuasiQuotes #-}

      module #{year_dir}.#{module_} (run) where

      import Control.Exception (throw)
      import Data.List (intersperse)
      import Debug.Trace (trace)
      import Text.Pretty.Simple (pPrint)
      import Text.RawString.QQ
      import Text.Regex.TDFA ((=~))

      data Line
        = Line
        {}
        deriving (Show)

      data State
        = State
        {}
        deriving (Show, Eq, Ord)

      parseLine :: String -> Line
      parseLine line =
        let regex = [r|([0-9]+): *(.+)|] :: String
            (_, _, _, [testNumber, numbers]) = line =~ regex :: (String, String, String, [String])
        in Line
              {
              }

      run :: IO ()
      run = do
        content <- readFile "#{txt_path}"
        let lines' :: [Line] = map parseLine . lines $ content
        pPrint $ lines'

    HASKELL

    File.open(path, 'w') do |f|
      f.write(template)
    end

    content = File.read('./advent.cabal')

    # Insert new module into cabal file
    full_module_ = "#{year_dir}.#{module_}"
    unless content.include?(full_module_)
      content.gsub!(/other-modules:\n/, "other-modules:\n        #{full_module_}\n")

      File.open('./advent.cabal', 'w') do |f|
        f.write(content)
      end
    end

    # Insert new module into Main.hs
    main = File.read('./app/Main.hs')
    unless main.include?(full_module_)
      main.gsub!(
        "main :: IO ()",
        <<~HASKELL
          import #{full_module_} qualified

          main :: IO ()
        HASKELL
      )
      main.gsub!(/  , #{year_dir}.\d+/, "  , #{full_module_}")
      main.gsub!(/  , #{year_dir}.\d+ as \w+/, "  , #{full_module_} qualified")

      File.open('./app/Main.hs', 'w') do |f|
        f.write(main)
      end
    end
  end
else
  puts "Must be in format YYYY-D+"
  exit 1
end